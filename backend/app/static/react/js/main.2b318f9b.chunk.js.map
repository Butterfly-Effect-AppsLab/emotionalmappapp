{"version":3,"sources":["utils/history.js","Components/NewsCards.js","Pages/NewsPage.js","utils/routes.js","Components/Navbar.js","utils/layout.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","useStyles","makeStyles","root","minWidth","marginBottom","text","NewsCards","props","news","classes","map","i","key","Card","className","variant","CardContent","Typography","style","fontWeight","component","title","description","author","CardActions","feedback","Button","color","renderCard","NewsPage","React","useState","setNews","useEffect","fetch","then","res","json","data","catch","resp","console","error","withRouter","exact","path","flexGrow","menuButton","marginLeft","Navbar","anchorEl","setAnchorEl","handleClose","log","AppBar","position","Toolbar","IconButton","onClick","event","currentTarget","edge","aria-label","id","keepMounted","open","Boolean","onBlur","onClose","MenuItem","href","Layout","children","history","App","Component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.2b318f9b.chunk.js","sourcesContent":["import {createBrowserHistory} from 'history';\n\nexport default createBrowserHistory();","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        marginBottom: 10,\n    },\n    text: {\n        marginBottom: 10,\n    },\n\n});\n\nexport default function NewsCards(props) {\n    const {news} = props\n    const classes = useStyles();\n\n    const renderCard = (news, i) => {\n        return (\n            <div key={i}>\n                <Card className={classes.root} variant=\"outlined\">\n                    <CardContent>\n                        <Typography className={classes.text} style={{fontWeight: 'bold'}} variant=\"h5\" component=\"h2\">\n                            {news.title}\n                        </Typography>\n                        <Typography className={classes.text} variant=\"body2\" component=\"p\">\n                            {news.description}\n                        </Typography>\n                        <Typography className={classes.text} variant=\"body2\" component=\"p\">\n                            - {news.author ? news.author : \"Unknown\"}\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        {news.feedback ? <Button variant='contained' color='primary'>Give Feedback</Button> : null}\n                    </CardActions>\n                </Card>\n            </div>\n        );\n    };\n\n    return (\n        <>\n            {news.map((news, i) => renderCard(news, i))}\n            {/* {console.log(news)} */}\n        </>\n\n    );\n}\n","import React, { useEffect } from 'react';\nimport NewsCards from '../Components/NewsCards';\n\nconst NewsPage = () => {\n    const [news, setNews] = React.useState([]);\n\n    useEffect(() => {\n        fetch('/news')\n            .then(res => res.json())\n            .then(data => {\n                setNews(data.data);\n            }).catch(resp => {\n                console.error(resp);\n            });\n    }, [])\n\n    return (\n        <div>\n            <center><h1>Newsletter</h1></center>\n            <NewsCards news={news} />\n        </div>\n    )\n};\n\nexport default NewsPage;","import React from 'react';\nimport {Route, withRouter} from 'react-router-dom';\nimport NewsPage from '../Pages/NewsPage';\n\n\nconst Routes = () => (\n  <>\n    <Route exact path={'/'} component={NewsPage} />\n    \n  </>\n);\nexport default withRouter(Routes);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst useStyles = makeStyles(({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: 'auto',\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Navbar() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    console.log(\"som tu\");\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            News\n          </Typography>\n          <IconButton onClick={handleClick} edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n            <Menu\n              id=\"simple-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onBlur={handleClose}\n              onClose={handleClose}\n            >\n              <MenuItem onClick={handleClose} component=\"a\" href=\"https://google.com\">Profile</MenuItem>\n              <MenuItem onClick={handleClose} component=\"a\" href=\"https://messenger.com\">My account</MenuItem>\n              <MenuItem onClick={handleClose} component=\"a\" href=\"https://bing.com\">Logout</MenuItem>\n            </Menu>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n","import React from 'react';\nimport Navbar from '../Components/Navbar.js';\n\nconst Layout = ({children, history}) => {\n\n    return (\n        <>\n            <Navbar history={history}/>\n            {children}\n        </>\n    )\n};\n\nexport default Layout;","import React, { Component } from 'react';\nimport { Router } from 'react-router-dom';\nimport './App.css';\nimport history from './utils/history';\nimport Routes from './utils/routes';\nimport Layout from './utils/layout';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Router history={history}>\n          <Layout history={history}>\n            <Routes/>\n          </Layout>\n        </Router>\n      </div>\n    )\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}